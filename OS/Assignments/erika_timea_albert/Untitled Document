         /*  if((list+parse+extend+find_all)==0 || (list+parse+extend+find_all)>1){
                  printf("Not a valid command!\n");
                  exit(2);
              }
              if(list==1){
                  if(lin!=-1 || sec!=-1){
                      printf("Not a valid command!\n");
                      exit(3);
                  }
                  else if(recursive==0 && strlen(path)!=0){
                      printContent(filter_size,filter_perm,path);
                      free(filter_size);
                      free(filter_perm);
                      free(path);
                      free(line);
                  }
                  else if(recursive==1 && strlen(path)!=0){
                      if(lstat(path,&inode)<0){
                          printf("ERROR\ninvalid directory path");
                          exit(2);
                      }
                      printf("SUCCESS\n");
                      printRecursive(path,path,filter_size,filter_perm);
                  }
              }
              if(parse==1){
                  if(recursive==1 || strlen(filter_perm)!=0 || strlen(filter_size)!=0 || sec!=-1 || lin!=-1){
                      printf("Not a valid command!\n");
                      exit(4);
                  }
                  if(strlen(path)!=0){
                      int j = testSF(path,sections,&nr_section,&version);
                      print_parse_result(j);
                      switch (j) {
                          case 0:
                              printf("SUCCESS\nversion=%d\nnr_sections=%d\n",version,nr_section);
                              for(int i=0;i<nr_section; i++){
                                  printf("section%d: %s %d %d \n",i+1,sections[i].name,sections[i].type,sections[i].size);
                              }
                              break;
                          case 1:
                              printf("ERROR\nwrong magic");
                              break;
                          case 2:
                              printf("ERROR\nwrong version");
                              break;
                          case 3:
                              printf("ERROR\nwrong sect_nr");
                              break;
                          case 4:
                              printf("ERROR\nwrong sect_types");
                              break;
                          default:
                              printf("Something went wrong");
                      }

                  }
                  else {
                      printf("Empty path!\n");
                  }
              }
              if(extract==1){
                  if(recursive==1 || strlen(filter_perm)!=0 || strlen(filter_size)!=0){
                      printf("Not a valid command!\n");
                      exit(4);
                  }
                  if(strlen(path)!=0){
                      int k = testSF(path,sections,&nr_section,&version);
                      if(k!=0){
                          printf("ERROR\ninvalid file");
                          printf("%d ",k);
                          exit(9);
                      }
                      extractLine(path,sections,nr_section,sec,lin);
                  }
                  else {
                      printf("Empty path!\n");
                  }
              }
          }
         if(strstr(argv[1],"list")){
              if(argc == 3 ) {
                  printContent("no_filter",argv[2]);
              }
              else if(argc == 4){
                  recursive=0;
                  path = (char*)malloc(1000*sizeof(char));
                  filter = (char*)malloc(100*sizeof(char));
                  line =(char*)malloc(1000*sizeof(char));
                  for(int i=2; i<=3; i++){
                      if(strcmp(argv[i],"recursive")==0){
                          recursive=1;
                      }
                      else if(strstr(argv[i],"path=")){
                          strcpy(line,argv[i]);
                      }
                      else if(strstr(argv[i],"permissions=")||strstr(argv[i],"size_smaller=")){
                          strcpy(filter,argv[i]);
                      }
                  }
                  if(recursive==1) {
                      strcpy(path,line+5);
                      if(lstat(path,&inode)<0){
                          printf("ERROR\ninvalid directory path");
                          exit(2);
                      }
                      printf("SUCCESS\n");
                      printRecursive(path, path, 10, "no_filter");
                      free(line);
                  }
                  else{
                     printContent(filter,line);
                      free(filter);
                      free(path);
                      free(line);
                  }

              }
             else if(argc == 5){
                  recursive=0;
                  path = (char*)malloc(1000*sizeof(char));
                  filter = (char*)malloc(100*sizeof(char));
                  line =(char*)malloc(1000*sizeof(char));
                  for(int i=2; i<=4; i++){
                      if(strcmp(argv[i],"recursive")==0){
                          recursive=1;
                      }
                      else if(strstr(argv[i],"path=")){
                          strcpy(line,argv[i]);
                      }
                      else if(strstr(argv[i],"permissions=")){
                          strcpy(filter,argv[i]+12);
                          filt_type=0;
                      }
                      else if (strstr(argv[i],"size_smaller=")){
                          strcpy(filter,argv[i]+13);
                          filt_type=1;
                      }
                  }
                  strcpy(path,line+5);

                  if(lstat(path,&inode)<0){
                           printf("ERROR\ninvalid directory path");
                           exit(3);
                  }
                  printf("SUCCESS\n");
                  printRecursive(path,path,filt_type,filter);
                  free(filter);
                  free(line);
              }

          }
          if(strstr(argv[1],"parse")){
              line=(char*)malloc(1000*sizeof(char));
              path=(char*)malloc(1000*sizeof(char));
              strcpy(line,argv[2]);
              strcpy(path,line+5);
              int j = testSF(path,sections,&nr_section,&version);
              switch (j) {
                  case 0:
                      printf("SUCCESS\nversion=%d\nnr_sections=%d\n",version,nr_section);
                      for(int i=0;i<nr_section; i++){
                          printf("section%d: %s %d %d \n",i+1,sections[i].name,sections[i].type,sections[i].size);
                      }
                      break;
                  case 1:
                      printf("ERROR\nwrong magic");
                      break;
                  case 2:
                      printf("ERROR\nwrong version");
                      break;
                  case 3:
                      printf("ERROR\nwrong sect_nr");
                      break;
                  case 4:
                      printf("ERROR\nwrong sect_types");
                      break;
                  default:
                      printf("Something went wrong");
              }
              free(line);
              free(path);

          }
          if(strstr(argv[1],"extract")){
              path=(char*)malloc(1000*sizeof(char));
              for(int i=2; i<=4; i++){
                  if(strstr(argv[i],"path=")){
                      strcpy(path,argv[i]+5);
                  }
                  else if(strstr(argv[i],"section=")){
                      sec=atoi(argv[i]+8);
                  }
                  else if(strstr(argv[i],"line=")){
                      lin=atoi(argv[i]+5);
                  }

              }
              int k = testSF(path,sections,&nr_section,&version);
              if(k!=0){
                  printf("ERROR\ninvalid file");
                  printf("%d ",k);
                  exit(9);
              }
              extractLine(path,sections,nr_section,sec,lin);
              free(path);
          }
  */
